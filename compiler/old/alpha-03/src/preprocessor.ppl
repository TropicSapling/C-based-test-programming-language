#include <stdlib.h>;
#include <string.h>;
#include <stdbool.h>;
#include <stdio.h>;
#include <errno.h>;
#include <ctype.h>;
#include <sys/stat.h>;

#include "def.h";

#define INCR_MEM(size) do { \
	if(@input_item + (size) > @input_size) { \
		@input_size *= 2; \
		safe_realloc((void pointer*2) processed_input, @input_size); \
	} \
} while(0)

#define printError(message) do { \
	printErr((struct ErrInfo) {.msg = message, .filename = path[1], .lineno = lineno}, 0); \
} while(0)

static char pointer strdup(const char pointer str) {
	size_t len = strlen(str) + 1;
	char pointer ptr = malloc(len);
	
	return ptr ? memcpy(ptr, str, len) : NULL;
}

static bool isSpecial(char c) {
	for(unsigned short i = 0; specials[i] != '\0'; i++) {
		if(c == specials[i]) return true;
	}
	
	return false;
}

static bool isNumber(char pointer strp, char pointer SOL) {
	for(unsigned short i = 0; strp[-i] != ' ' && strp[-i] != '\t' && !isSpecial(strp[-i]) && strp - i != SOL; i++) {
		if(!isdigit(strp[-i])) return false;
	}
	
	return true;
}

static bool isReserved(const char arr[static 1][9], char pointer strp, unsigned int len, char pointer SOL) {
	if(isdigit(strp[0])) { // Pointers, arrays & lists
		while(isdigit(@strp)) strp--;
		strp--;
		
		if(strp[0] == 'r' && strp[-1] == 'e' && strp[-2] == 't' && strp[-3] == 'n' && strp[-4] == 'i' && strp[-5] == 'o' && strp[-6] == 'p') return true;
		if(strp[0] == 'y' && strp[-1] == 'a' && strp[-2] == 'r' && strp[-3] == 'r' && strp[-4] == 'a') return true;
		if(strp[0] == 't' && strp[-1] == 's' && strp[-2] == 'i' && strp[-3] == 'l') return true;
	} else {
		for(unsigned int i = 0; i < len; i++) {
			bool reserved = false;
			unsigned short s2 = 0;
			for(short s = strlen(arr[i]) - 1; s >= 0 && strp - s2 + 1 != SOL; s--, s2++) {
				if(strp[-s2] != arr[i][s] || strp[-s2] == ' ' || strp[-s2] == '\t' || isSpecial(strp[-s2])) {
					reserved = false;
					break;
				} else {
					reserved = true;
				}
			}
			
			if(reserved && strp - s2 + 1 != SOL) return true;
		}
		
		while(@strp != ' ' && @strp != '\t' && !isSpecial(@strp) && strp != SOL) strp--;
		if(@strp == '#') return true;
	}
	
	return false;
}

static char pointer sanitize(char pointer strp) {
	char pointer new_strp = strdup(strp);
	for(unsigned short i = 0; new_strp[i] != '\0'; i++) {
		if(new_strp[i] == '/' || new_strp[i] == '.' || new_strp[i] == '-') {
			new_strp[i] = '$';
		}
	}
	
	return new_strp;
}

static void typeTo(char pointer*2 processed_input, size_t pointer input_size, size_t pointer input_item, char pointer strp) {
	while(@strp != '\0') {
		INCR_MEM(1);
		
		(@processed_input)[@input_item] = @strp;
		(@input_item)++;
		
		strp++;
	}
}

static unsigned int replaceIfDefined(char pointer*2 processed_input, size_t pointer input_size, size_t pointer input_item, char pointer*2 str, char defs[256][2][256], size_t defs_len, char locs[256][2][256], size_t locs_len) {
	if((@str)[-1] != '.') {
		for(size_t i = 0; i < defs_len; i++) {
			unsigned short def_len = strlen(defs[i][0]);
			if((@str)[>>> until (@str)[__item] == '\0' || isSpecial((@str)[__item]) || (@str)[__item] == ' '] == (defs[i][0])[>>> def_len]) {
				for(unsigned short s = 0, defr_len = strlen(defs[i][1]); s < defr_len; s++) {
					INCR_MEM(1);
					(@processed_input)[@input_item] = defs[i][1][s];
					
					(@input_item)++;
				}
				
				@str += def_len;
				
				return 1;
			}
		}
		
		for(size_t i = 0; i < locs_len; i++) {
			unsigned short loc_len = strlen(locs[i][0]);
			if((@str)[>>> until (@str)[__item] == '\0' || isSpecial((@str)[__item]) || (@str)[__item] == ' '] == (locs[i][0])[>>> loc_len]) {
				for(unsigned short s = 0, locr_len = strlen(locs[i][1]); s < locr_len; s++) {
					INCR_MEM(1);
					(@processed_input)[@input_item] = locs[i][1][s];
					
					(@input_item)++;
				}
				
				@str += loc_len;
				
				return 1;
			}
		}
	}
	
	return 0;
}

size_t preprocess(FILE pointer input, char pointer*2 processed_input, size_t pointer input_size, size_t pointer input_item, char pointer path[static 2], int argc, char defs[256][2][256], size_t pointer defID) {
	char buf[65536];
	size_t lineno = 1;
	size_t extra_lines = 0;
	
	char locals[256][2][256];
	size_t locID = 0;
	
	unsigned short scoped_exts[128] = {0};
	unsigned short scope = 0;
	unsigned short ifDefs = 0;
	
	bool ignoring = false;
	bool ignoring2 = false; // TMP; allows for use of C directives
	bool escaping = false;
	bool inStr = false;
	bool inStr2 = false;
	
	bool exporting = false;
	
	while(fgets(buf, 65536, input) != NULL) {
		char pointer trimmed_buf -> buf[0];
		while(@trimmed_buf == '\t' || @trimmed_buf == ' ') {
			INCR_MEM(1);
			(@processed_input)[@input_item] = @trimmed_buf;
			
			(@input_item)++;
			trimmed_buf++;
		}
		
		if(ignoring2) extra_lines++;
		
		if(ignoring || (@trimmed_buf == '/' && @(trimmed_buf + 1) == '*')) {
			ignoring = true;
			
			while(@trimmed_buf != '\0' && !(@trimmed_buf == '*' && @(trimmed_buf + 1) == '/')) trimmed_buf++;
			
			if(@trimmed_buf != '\0') {
				ignoring = false;
				trimmed_buf += 2;
			} else {
				INCR_MEM(1);
				(@processed_input)[@input_item] = '\n';
				(@input_item)++;
				
				lineno++;
				continue;
			}
		}
		
		if(strcmp(trimmed_buf, "\r\n") == 0 || (@trimmed_buf == '/' && @(trimmed_buf + 1) == '/')) {
			INCR_MEM(1);
			(@processed_input)[@input_item] = '\n';
			(@input_item)++;
			
			lineno++;
			continue;
		}
		
		if(trimmed_buf[0] == '#') {
			size_t c = 1;
			char skey[8];
			
			while(trimmed_buf[c] != ' ' && trimmed_buf[c] != ';' && trimmed_buf[c] != '\n' && trimmed_buf[c] != '\0') {
				skey[c - 1] = trimmed_buf[c];
				c++;
			}
			
			skey[c - 1] = '\0';
			
			c++;
			
			if(ifDefs) {
				if(strcmp(skey, "endif") == 0) {
					ifDefs--;
				}
				
				INCR_MEM(1);
				(@processed_input)[@input_item] = '\n';
				(@input_item)++;
				
				lineno++;
				continue;
			}
			
			if(!ignoring2) {
				if(skey[>>> until skey[__item] == '\0'] == 'def') {
					c++;
					
					// Get what to replace
					unsigned int i = 0;
					for(; trimmed_buf[c + i] != '\'' && trimmed_buf[c + i] != '"' && trimmed_buf[c + i] != ';' && trimmed_buf[c + i] != '\0'; i++) {
						if(trimmed_buf[c + i] == '\\') {
							i++;
						}
						
						defs[@defID][0][i] = trimmed_buf[c + i];
					}
					defs[@defID][0][i] = '\0';
					
					if(trimmed_buf[c + i] == '\0' || trimmed_buf[c + i] == ';') {
						printError("Missing end quote (' or \") after '" WHITE "#def" RESET "'.");
					}
					
					c += i + 6;
					
					// Get what to replace with
					unsigned int r_pos = 0;
					for(; trimmed_buf[c + r_pos] != '\'' && trimmed_buf[c + r_pos] != '"' && trimmed_buf[c + r_pos] != ';' && trimmed_buf[c + r_pos] != '\0'; r_pos++) {
						if(trimmed_buf[c + r_pos] == '\\') {
							r_pos++;
						}
						
						defs[@defID][1][r_pos] = trimmed_buf[c + r_pos];
					}
					defs[@defID][1][r_pos] = '\0';
					
					if(trimmed_buf[c + r_pos] == '\0' || trimmed_buf[c + r_pos] == ';') {
						printError("Missing end quote (' or \") after '" WHITE "#def" RESET "'.");
					}
					
					(@defID)++;
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					lineno++;
					continue;
				} else if(strcmp(skey, "ifdef") == 0) {
					size_t i = 0;
					for(; i < @defID; i++) {
						unsigned short def_len = strlen(defs[i][0]);
						char pointer cdef = defs[i][0];
						if(trimmed_buf[c >>> until trimmed_buf[__item] == ';'] == cdef[>>> def_len]) {
							break;
						}
					}
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					if(i >= @defID) ifDefs++;
					
					lineno++;
					continue;
				} else if(strcmp(skey, "ifndef") == 0) {
					size_t i = 0;
					for(; i < @defID; i++) {
						unsigned short def_len = strlen(defs[i][0]);
						char pointer cdef = defs[i][0];
						if(trimmed_buf[c >>> until trimmed_buf[__item] == ';'] == cdef[>>> def_len]) {
							ifDefs++;
							break;
						}
					}
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					lineno++;
					continue;
				} else if(strcmp(skey, "endif") == 0) {
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					lineno++;
					continue;
				} else if(strcmp(skey, "import") == 0) {
					char full_path[256];
					unsigned short i;
					
					if(trimmed_buf[c] == '<') {
						// Import standard library
						
						strcpy(full_path, path[0]); // Path to executable
						
						i = strlen(full_path) - 1;
						for(unsigned short s = 0; s < 3; s++) {
							do {
								i--;
							} while(full_path[i] != '/' && i > 0);
							
							if(i == 0) break;
						}
						full_path[i] = '\0';
						
						strcat(full_path, "/lib/");
						c++;
						
						char lib_path[128];
						i = 0;
						for(; trimmed_buf[c + i] != '>' && trimmed_buf[c + i] != '\'' && trimmed_buf[c + i] != '"' && trimmed_buf[c + i] != ';' && trimmed_buf[c + i] != '\0'; i++) {
							lib_path[i] = trimmed_buf[c + i];
						}
						
						if(trimmed_buf[c + i] == '\0' || trimmed_buf[c + i] == ';') {
							printError("Missing " WHITE "'" RESET ", " WHITE "\"" RESET "or " WHITE ">" RESET " after '" WHITE "#import" RESET "'.");
						}
						
						lib_path[i] = '\0';
						strcat(full_path, lib_path);
					} else {
						// Import custom library
						
						strcpy(full_path, path[1]); // Path to P+ file
						
						char lib_path[128];
						c++;
						i = 0;
						for(; trimmed_buf[c + i] != '>' && trimmed_buf[c + i] != '\'' && trimmed_buf[c + i] != '"' && trimmed_buf[c] != ';' && trimmed_buf[c + i] != '\0'; i++) {
							lib_path[i] = trimmed_buf[c + i];
						}
						
						if(trimmed_buf[c + i] == '\0' || trimmed_buf[c + i] == ';') {
							printError("Missing " WHITE "'" RESET ", " WHITE "\"" RESET "or " WHITE ">" RESET " after '" WHITE "#import" RESET "'.");
						}
						
						lib_path[i] = '\0';
						
						char pointer new_lib_path = "";
						unsigned short levels = 1;
						unsigned short sh = strlen(lib_path) - 1;
						do {
							sh--;
							if(sh > 0 && lib_path[sh] == '.' && lib_path[sh - 1] == '.') {
								if(levels == 1) new_lib_path = &lib_path[sh + 1];
								levels++;
								sh--;
							} else if(levels > 1 && lib_path[sh] != '/') {
								break;
							}
						} while(sh > 0);
						
						sh = strlen(full_path) - 1;
						for(unsigned short s = 0; s < levels; s++) {
							do {
								sh--;
							} while(full_path[sh] != '/' && sh > 0);
							
							if(sh == 0) break;
						}
						
						if(levels == 1 && lib_path[0] != '/') sh++;
						
						full_path[sh] = '\0';
						
						if(new_lib_path[0] == '\0') {
							strcat(full_path, lib_path);
						} else {
							strcat(full_path, new_lib_path);
						}
					}
						
					FILE pointer lib = fopen(full_path, "r");
					if(lib == NULL) {
						perror("ERROR");
						fprintf(stderr, "ID: %d\n", errno);
						exit(EXIT_FAILURE);
					}
					
					typeTo(processed_input, input_size, input_item, "#include \"");
					
					FILE pointer lib_f;
					if(argc < 3 || path[2][0] == '-') {
						size_t file_length = strlen(full_path);
						char filename[file_length];
						strcpy(filename, full_path);
						
						size_t c = file_length - 1;
						while(filename[c] != '.') {
							c--;
						}
						
						memset(->filename[c + 1], 'c', 1);
						memset(->filename[c + 2], '\0', 1);
						
						while(filename[c] != '/' && c > 0) {
							c--;
						}
						
						char finalname[strlen(filename) + 4];
						char success;
						
						if(c == 0) {
							success = mkdir("bin", 0777);
							
							strcpy(finalname, "bin/");
							strcat(finalname, filename);
						} else {
							strncpy(finalname, filename, c + 1);
							finalname[c + 1] = '\0';
							strcat(finalname, "bin/");
							success = mkdir(finalname, 0777);
							strcat(finalname, ->filename[c + 1]);
						}
						
						if(success != 0 && errno != 17) {
							perror("ERROR");
							fprintf(stderr, "ID: %d\n", errno);
							
							return 1;
						}
						
						typeTo(processed_input, input_size, input_item, finalname);
						
						lib_f = fopen(finalname, "w");
						if(lib_f == NULL) {
							perror("ERROR");
							fprintf(stderr, "ID: %d\n", errno);
							exit(EXIT_FAILURE);
						}
					} else {
						size_t file_length = strlen(path[2]);
						char filename[file_length];
						strcpy(filename, path[2]);
						
						size_t c2 = strlen(full_path) - 1;
						while(full_path[c2] != '.') {
							c2--;
						}
						
						memset(->full_path[c2 + 1], 'c', 1);
						memset(->full_path[c2 + 2], '\0', 1);
						
						size_t c = file_length - 1;
						while(filename[c] != '/' && c > 0) {
							c--;
						}
						
						char finalname[strlen(filename) + 4];
						
						strncpy(finalname, filename, c + 1);
						finalname[c + 1] = '\0';
						
						unsigned int i = strlen(full_path);
						while(full_path[i] != '/' && i > 0) {
							i--;
						}
						
						strcat(finalname, full_path + i + 1);
						
						typeTo(processed_input, input_size, input_item, full_path + i + 1);
						
						lib_f = fopen(finalname, "w");
						if(lib_f == NULL) {
							perror("ERROR");
							fprintf(stderr, "ID: %d\n", errno);
							exit(EXIT_FAILURE);
						}
					}
					
					typeTo(processed_input, input_size, input_item, "\"\n");
					
					if(trimmed_buf[c + i + 2] == 'a') { // import as ...
						// WIP
					} else {
						char pointer lib_paths[2] = {path[0], full_path};
						size_t lib_file_size = 256;
						size_t lib_file_item = 0;
						char pointer lib_file = malloc(lib_file_size);
						
						preprocess(lib, ->lib_file, ->lib_file_size, ->lib_file_item, lib_paths, argc, defs, defID);
						
						for(size_t i = 0; i < lib_file_item; i++) {
							fprintf(lib_f, "%c", lib_file[i]);
						}
						
						// TODO: Add support for importing specific functions
					}
					
					fclose(lib);
					fclose(lib_f);
					
					lineno++;
					continue;
				} else if(strcmp(skey, "endexp") == 0) {
					exporting = false;
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					lineno++;
					continue;
				} else if(strcmp(skey, "export") == 0) {
					exporting = true;
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					lineno++;
					continue;
				}
			}
			
			// Temporary; allows for use of C directives
			if(strcmp(skey, "clang") == 0) {
				ignoring2 = true;
			} else if(strcmp(skey, "endc") == 0) {
				ignoring2 = false;
				extra_lines--;
			}
		}
		
		while(@trimmed_buf != '\0') {
			if(!escaping) {
				if(!inStr2 && @trimmed_buf == '\'') {
					inStr = inStr ? false : true;
				} else if(!inStr && @trimmed_buf == '"') {
					inStr2 = inStr2 ? false : true;
				} else if(@trimmed_buf == '\\') escaping = true;
			} else escaping = false;
			
			if(!inStr && !inStr2 && @trimmed_buf == '/') {
				if(@(trimmed_buf + 1) == '/') {
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					break;
				}
				
				if(@(trimmed_buf + 1) == '*') {
					ignoring = true;
					
					INCR_MEM(1);
					(@processed_input)[@input_item] = '\n';
					(@input_item)++;
					
					break;
				}
			}
			
			if(trimmed_buf != buf && (inStr || inStr2 || @trimmed_buf == ' ' || (@(trimmed_buf - 1) != ' ' && @(trimmed_buf - 1) != '\t' && @(trimmed_buf - 1) != '\n' && !isSpecial(@trimmed_buf) && !isSpecial(@(trimmed_buf - 1))))) {
				INCR_MEM(1);
				(@processed_input)[@input_item] = @trimmed_buf;
				
				(@input_item)++;
				trimmed_buf++;
			} else if(replaceIfDefined(processed_input, input_size, input_item, ->trimmed_buf, defs, @defID, locals, locID)) {
				if(@trimmed_buf == '{' || @trimmed_buf == '(') {
					scope++;
				} else if(@trimmed_buf == '}' && scope) {
					scope--;
					
					while(scoped_exts[scope] > 0) {
						(@defID)--;
						scoped_exts[scope]--;
					}
				} else if(@trimmed_buf == ')' && scope) {
					scope--;
					
					if(@(trimmed_buf + 1) == ';') while(scoped_exts[scope] > 0) {
						(@defID)--;
						scoped_exts[scope]--;
					}
				}
				
				if(@trimmed_buf != '\r') {
					INCR_MEM(1);
					(@processed_input)[@input_item] = @trimmed_buf;
					(@input_item)++;
				}
				
				trimmed_buf++;
			} else {
				if(trimmed_buf != buf) {
					char pointer trimmed_buf_bef = trimmed_buf - 1; // End of variable name
					
					while(trimmed_buf_bef != buf && (@trimmed_buf_bef == ' ' || @trimmed_buf_bef == '\t')) trimmed_buf_bef--;
					
					unsigned short def_start = 0; // Start of variable name
					while(trimmed_buf_bef - def_start != buf && @(trimmed_buf_bef - def_start) != ' ' && !isSpecial(@(trimmed_buf_bef - def_start))) {
						def_start++;
					}
					
					def_start--;
					
					if(trimmed_buf_bef != buf && trimmed_buf_bef - def_start != buf && (!ignoring2 || @trimmed_buf_bef == '$')) {
						unsigned short cbef = def_start + 1; // End of data type
						while(trimmed_buf_bef - cbef != buf && (@(trimmed_buf_bef - cbef) == ' ' || @(trimmed_buf_bef - cbef) == '\t')) cbef++;
						
						if(trimmed_buf_bef - cbef != buf && (isReserved(types, trimmed_buf_bef - cbef, 27, buf) || @trimmed_buf_bef == '$') && @trimmed_buf_bef != '\'' && @trimmed_buf_bef != '"' && !isNumber(trimmed_buf_bef, buf) && !isSpecial(@trimmed_buf_bef) && !isReserved(types, trimmed_buf_bef, 27, buf) && !isReserved(reserved_keys, trimmed_buf_bef, 29, buf)) {
							@input_item -= trimmed_buf - trimmed_buf_bef - 1;
							
							if(@trimmed_buf_bef == '$') {
								(@input_item)--;
								typeTo(processed_input, input_size, input_item, "_ppl");
							} else if(@(trimmed_buf_bef - def_start) == '$') {
								(@processed_input)[@input_item - def_start - 1] = ' ';
							} else if(exporting || scope) {
								typeTo(processed_input, input_size, input_item, "_ppl");
								
								strncpy(defs[@defID][0], trimmed_buf_bef - def_start, trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1);
								defs[@defID][0][trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1] = '\0';
								
								strncpy(defs[@defID][1], trimmed_buf_bef - def_start, trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1);
								defs[@defID][1][trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1] = '\0';
								strcat(defs[@defID][1], "_ppl");
								
								(@defID)++;
								if(scope) scoped_exts[scope - 1]++;
							} else {
								typeTo(processed_input, input_size, input_item, "_ppl_");
								
								char pointer path_ext = sanitize(path[1]);
								typeTo(processed_input, input_size, input_item, path_ext);
								
								strncpy(locals[locID][0], trimmed_buf_bef - def_start, trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1);
								locals[locID][0][trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1] = '\0';
								
								strncpy(locals[locID][1], trimmed_buf_bef - def_start, trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1);
								locals[locID][1][trimmed_buf_bef - (trimmed_buf_bef - def_start) + 1] = '\0';
								strcat(locals[locID][1], "_ppl_");
								strcat(locals[locID][1], path_ext);
								
								locID++;
								
								free(path_ext);
							}
						}
					}
				}
				
				if(@trimmed_buf == '{' || @trimmed_buf == '(') {
					scope++;
				} else if(@trimmed_buf == '}') {
					if(scope) {
						scope--;
					} else {
						printError("Missing starting brace '" WHITE "{" RESET "' before end brace '" WHITE "}" RESET "'.");
					}
					
					while(scoped_exts[scope] > 0) {
						(@defID)--;
						scoped_exts[scope]--;
					}
				} else if(@trimmed_buf == ')') {
					if(scope) {
						scope--;
					} else {
						printError("Missing starting parenthesis '" WHITE "(" RESET "' before end parenthesis '" WHITE ")" RESET "'.");
					}
					
					if(@(trimmed_buf + 1) == ';') while(scoped_exts[scope] > 0) {
						(@defID)--;
						scoped_exts[scope]--;
					}
				}
				
				if(@trimmed_buf != '\r') {
					INCR_MEM(1);
					
					(@processed_input)[@input_item] = @trimmed_buf;
					(@input_item)++;
				}
				
				trimmed_buf++;
			}
		}
		
		lineno++;
	}
	
	INCR_MEM(1);
	(@processed_input)[@input_item] = '\0';
	
	return extra_lines;
}