operator +;
operator -;
operator *;
operator /;
operator %;
operator =;
operator &;
operator |;
operator ^;
operator <;
operator >;
operator !;
operator ~;
operator ?;
operator :;
operator .;
operator ,;
operator @;

#precedence 242
macro (int a) != (int b) {
	return !(a == b);
}

#precedence 243
macro (int a) <= (int b) {
	return a < b || a == b;
}

#precedence 243
macro (int a) >= (int b) {
	return a > b || a == b;
}

#precedence 0
macro (int var) += (int n) {
	return var = var + n;
}

#precedence 0
macro (int var) -= (int n) {
	return var = var - n;
}

#precedence 0
macro (int var) *= (int n) {
	return var = var * n;
}

#precedence 0
macro (int var) /= (int n) {
	return var = var / n;
}

#precedence 0
macro (int var) %= (int n) {
	return var = var % n;
}

#precedence 0
macro (int var) >>= (int n) {
	return var = var >> n;
}

#precedence 0
macro (int var) <<= (int n) {
	return var = var << n;
}

#precedence 0
macro (int var) ^= (int n) {
	return var = var ^ n;
}

macro (int a)++ {
	return {
		a += 1;
		a - 1
	};
}

macro ++(int a) {
	return {
		a += 1;
		a
	};
}

macro (int a)-- {
	return {
		a -= 1;
		a + 1
	};
}

macro --(int a) {
	return {
		a -= 1;
		a
	};
}

macro if (bool cond) (int body) {
	return unsafe {
		let res = __uninit__; // '__uninit__' won't be necessary in the future
		cond && (res = body);
		res
	};
}

macro if (bool cond) (int body) else (int expr) {
	return unsafe {
		let res = __uninit__; // '__uninit__' won't be necessary in the future
		cond && (res = body) || (res = expr);
		res
	};
}

#[allow(unused)]
#precedence 247
func (int base) ** (unsigned int exp) -> int {
	if exp == 0
		1
	else if exp % 2 == 0
		base ** (exp / 2) * base ** (exp / 2)
	else
		base * base ** (exp / 2) * base ** (exp / 2)
}