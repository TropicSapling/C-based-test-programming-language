%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Triforce
file_extensions:
  - tri
scope: source.triforce
variables:
  identifier: '(?:(?:[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+|(?!-->)([!<>\-+%/*^&|@~?.]|==|##)[!<>\-+%/*^&|@~?.=#]*))' # include a word boundary at the end to ensure all possible characters are consumed, to prevent catastrophic backtracking
  escaped_byte: '\\(x\h{2}|n|r|t|0|"|''|\\)'
  escaped_char: '\\(x\h{2}|n|r|t|0|"|''|\\|u\{\h{1,6}\})'
contexts:
  main:
    - include: general

  general:
    - include: universal

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    - include: block-comments

    # Keywords.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|then|else|for\s+each|while|break|continue(\s+matching(\s+for)?)?|return|fulfilling|where|matches|is|could\s+be|prerun|run|export(\s+all)?|import|expose|print(ln)?)\b'
      scope: keyword.control.rust

    - match: '\b(impure|unpredictable|implicitly|ref\s+to|allowing|unparsed|raw|becoming|constructed\s+using|auto)\b'
      scope: storage.type.rust

    - match: '\b(True|False|this|caller)\b'
      scope: constant.language.rust

    - match: '\b(as|in|any(\s+of)?|optionally|listified|codified|stringified)\b'
      scope: keyword.operator.rust

    - match: '\b[A-Z]{{identifier}}'
      scope: support.function.rust

    # Numbers
    - match: '\b(-)?((0(x[0-9a-f_]+|o[0-7_.]+|b[01_.]+))|[0-9.][0-9_.]*)([iu](8|16|32|64|128|size)|f(loat)?(32|64))?\b'
      scope: constant.numeric.example-c

    - match: ':|-->'
      scope: punctuation.separator.rust

    - include: operators

    # Punctuation
    - match: ';'
      scope: punctuation.terminator.rust

    - match: '[:,]'
      scope: punctuation.separator.rust

    - match: '\.'
      scope: punctuation.accessor.dot.rust

    # Blocks & groups
    - match: '(?=\{)'
      push: block

    - match: '(?=\()'
      push: group

    # Declarations & definitions
    - match: '\b(((rec\s+)?basic\s+)?(partial\s+)?func)\b'
      scope: storage.type.rust
      push: func-id-search

    - match: '\b(decl(\s+(symgroup|symindies|symblock))|enclosed\s+by|with\s+escaper)\b'
      scope: storage.type.rust

    - match: '\b(decl|let(\s+basic)?(\s+impure)?)\b'
      scope: storage.type.rust
      push: let-id-search-start

    - match: '\b(category|object)\b'
      scope: storage.type.rust
      push: func-id-search

  universal:
    - match: '`'
      scope: markup.italic
      push: eval-group
    - match: '\b__{{identifier}}__\b'
      scope: markup.heading

  block-comments:
    - match: '/\*'
      scope: punctuation.definition.comment.rust
      push:
        - meta_scope: comment.block.rust
        - match: '\*/'
          scope: punctuation.definition.comment.rust
          pop: true
        - include: block-comments
  
  func-id-search:
    - include: universal
    - match: '(?=\()'
      push: group
    - match: '\$'
      scope: keyword.operator.rust
      push: op-dollar
    - match: '{{identifier}}'
      scope: entity.name.function.rust
    - match: '(?=[{\[;]|-->)'
      pop: true

  let-id-search-start:
    - match: '\s+[\(]*'
      set: let-id-search

  let-id-search:
    - include: universal
    - match: '(?=\()'
      push: group
    - match: '\$'
      scope: keyword.operator.rust
      push: op-dollar
    - match: '{{identifier}}'
      scope: entity.name.function.rust
    - match: '(?=[=:\[;])'
      pop: true

  operators:
    - match: \.{2,3}
      scope: keyword.operator.range.rust
    - match: '[!<>=]=|[<>]'
      scope: keyword.operator.comparison.rust
    - match: '(?:[-+%/*^&|]|<<|>>)?='
      scope: keyword.operator.assignment.rust
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.rust
    - match: '[-+%/*]'
      scope: keyword.operator.arithmetic.rust
    - match: '[&|^]|<<|>>'
      scope: keyword.operator.bitwise.rust
    - match: '[@~?#'']'
      scope: keyword.operator.rust
    - match: '\$'
      scope: keyword.operator.rust
      push: op-dollar
    - match: '\b_\b'
      scope: keyword.operator.rust

  op-dollar:
    - include: universal
    - match: '{{identifier}}'
      scope: variable.parameter.rust
      pop: true
    - match: ''
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: '\\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true

  block:
    - match: '\}'
      scope: meta.block.rust punctuation.section.block.end.rust
      pop: true
    - match: '\{'
      scope: punctuation.section.block.begin.rust
      push: [block-body]

  block-body:
    - meta_scope: meta.block.rust
    - match: '(?=\})'
      pop: true
    - include: general

  group:
    - match: '\)'
      scope: meta.group.rust punctuation.section.group.end.rust
      pop: true
    - match: '\('
      scope: punctuation.section.group.begin.rust
      push: [group-body]

  group-body:
    - meta_scope: meta.group.rust
    - match: '(?=\))'
      pop: true
    - include: general

  group-tail:
    - meta_scope: meta.group.rust
    - match: '\)'
      scope: punctuation.section.group.end.rust
      pop: true
    - include: general

  eval-group:
    - meta_scope: markup.italic
    - match: '`'
      scope: markup.italic
      pop: true
    - include: general
