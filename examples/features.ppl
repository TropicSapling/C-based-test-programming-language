print("Amount of arguments specified: " + __argc);
print("Arguments specified: " + split(__args, " "));
print("Line number: " + __line);

pointer str -> "something";

pointer ptr -> str;
pointer address = ->str;

print("String: " + str); // something
print("Pointer/Reference: " + ptr);
print("Adress: " + adress);
print("Pointer value: " + @ptr);

void function {
	print("This function returns nothing.");
}

unsigned number function2(unsigned number par1) {
	return par1;
}

unsigned number <size>=1 function3 return [-127, 0, 255];

function(); // This function returns nothing.
print(function2(123)); // 123
print(function3()); // [-127, 0, 255]

pointer array -> [1, 65, 3, -34, -24, 121];
print(array[1>>>4]); // [65, 3, -34]
print(array[4>>>1]); // [65, 3, -34]
print(array[1<<<4]); // [-34, 3, 65]
print(array[4<<<1]); // [-34, 3, 65]

#redef . as $
#redef ; as .

pointer str -> "Hello world!". // Since this pointer is declared in the same scope as the first 'str' it overrides it
split(str, ' ').
print(str). // ["Hello", "world!"]

pointer str2 -> ['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!'].
split(str2, ' ').
print(str2). // ["Hello", "world!"]

#redef . as ;
#redef $ as .

pointer ascii_str -> [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33];
print(split((char pointer) ascii_str, ' ')); // ["Hello", "world!"]
print(split(ascii_str, 32)); // [[72, 101, 108, 108, 111], [119, 111, 114, 108, 100, 33]]

pointer custom_arr -> [2781, 'g', ["some", variable: "thing"], someFunction: function2, -93478];
print(custom_arr[1]); // 'g'
print(custom_arr[1<<<4] + [1, '2', 3]); // [someFunction: function2, ["some", variable: "thing"], 'g', 1, '2', 3]

print(1 == 0 ? "Impossible!\n" : "True\n");print(0 == 1 ? "Also impossible ofc\n" : "Yup.\n");

/* Multi
line
comment */

/* This
 * works
 * fine
 * as well
 * obviously */

/* And
 * this
 */

/* Single line comments using this syntax works too */

print('string without null termination');

return 0 from __app;
