#[allow(unused)]
import std::fs::File as FileHandler; // To test importing

// Side note: macros can also be defined inside of functions, and will in that case only work inside of that function
macro print_str = {
	const constant = "This is a constant string printed using a macro.";
	println constant;
};

macro func force_positive (int n) {
	if n >= 0 {
		println "OK: Good to go!";
		return n;
	} else {
		println "WARNING: Number is negative, converting into positive";
		return -(n);
	}
}

macro func power_of_ppl {
	println "  _______ _     _       _       _   _                                                  __   _____       \n |__   __| |   (_)     (_)     | | | |                                                / _| |  __ \\  _   \n    | |  | |__  _ ___   _ ___  | |_| |__   ___   _ __   _____      _____ _ __    ___ | |_  | |__) || |_ \n    | |  | '_ \\| / __| | / __| | __| '_ \\ / _ \\ | '_ \\ / _ \\ \\ /\\ / / _ \\ '__|  / _ \\|  _| |  ___/_   _|\n    | |  | | | | \\__ \\ | \\__ \\ | |_| | | |  __/ | |_) | (_) \\ V  V /  __/ |    | (_) | |   | |     |_|  \n    |_|  |_| |_|_|___/ |_|___/  \\__|_| |_|\\___| | .__/ \\___/ \\_/\\_/ \\___|_|     \\___/|_|   |_|          \n                                                | |                                                     \n                                                |_|                                                     ";
}

// func (int i) print; // Commented for now because apparently Rust doesn't support this

func (int i) backwards_println {
	if true { // To test if statements
		println i;
	}
	
	if 9 + 10 == 21 || 10 + 9 == 21 {
		println false;
	} else if 9 + 10 != 21 && 10 + 9 != 21 {
		if true { // To test nested if statements
			println true;
			println true;
		}
	} else {
		println false;
	}
}

func (int a) (int b) +++ (int c) (int d) -> int {
	return a + b + c + d; // To test return keyword
}

func (int a) (int b) --- (int c) (int d) -> int {
	a + b - c - d
}

func no_args {
	println "Function without args successfully called.";
}

func init {
	macro macro_str = "This string was printed in the form of a local macro.\n";
	
	(1 2 +++ (3 - 1) * 4 (5 + 1) (6 + 1) --- 7 8) - 1 backwards_println; // Like the most complex expression I can think of, took ages to make this get parsed successfully ;-;
	
	let res = 1 * 2 + {println "This was printed from inside an expression!"; 3 ** 4} * 5 + 6; // 'let' is necessary to allow variable shadowing, decrease bugs and make code clearer for both the compiler and the reader
	res += 123;
	
	const old_res = res++;
	println old_res;
	println res;
	
	unsigned int n = 456; // 'let' is however not necessary when specifying a type since it's obvious that it's a declaration anyway
	n *= 789;
	println n;
	
	const constant = "\nThis is a constant string.";
	println constant;
	
	print_str;
	println macro_str;
	
	no_args;
	
	power_of_ppl;
	
	println force_positive {
		println "This gets printed both at compile time and runtime!";
		0-123
	};
}