#[allow(unused)]
import std::fs::File as FileHandler; // To test importing

// func (int i) print; // Commented for now because apparently Rust doesn't support this

func (int i) backwards_println {
	if true { // To test if statements
		println i;
	}
	
	if 9 + 10 == 21 || 10 + 9 == 21 {
		println false;
	} else if 9 + 10 != 21 && 10 + 9 != 21 {
		if true { // To test nested if statements
			println true;
			println true;
		}
	} else {
		println false;
	}
}

func (int a) (int b) +++ (int c) (int d) -> int {
	return a + b + c + d; // To test return keyword
}

func (int a) (int b) --- (int c) (int d) -> int {
	a + b - c - d
}

func no_args {
	println "Function without args successfully called.";
}

func init {
	(1 2 +++ 3-- * 4 5++ 6++ --- 7 8)-- backwards_println; // Like the most complex expression I can think of, took ages to make this get parsed successfully ;-;
	
	let res = 1 * 2 + 3 ** 4 * 5 + 6; // 'let' is necessary to allow variable shadowing, decrease bugs and make code clearer for both the compiler and the reader
	res += 123;
	println res;
	
	unsigned int n = 456; // 'let' is however not necessary when specifying a type since it's obvious that it's a declaration anyway
	n *= 789;
	println n;
	
	const constant = "\nThis is a constant string.";
	println constant;
	
	no_args;
}