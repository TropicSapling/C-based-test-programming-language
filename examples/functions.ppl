/* func init() {
	println!("{}", (4 pow 3) pow (2 * 3));
} */

/* func (int base) pow (unsigned int exp) -> int {
	if exp == 0 {
		1
	} else if exp % 2 == 0 {
//		base pow (exp / 2) * base pow (exp / 2)
	} else {
//		base * base pow (exp / 2) * base pow (exp / 2)
	}
	
	123
}

func println (int an_actual_int) {
	
}

func (int rand) (unsigned int random) (int rand2) testing {
	
}

func init {
	println 4 pow 5 pow 6 pow 7;
} */

/*
[println, 4, pow, 5, pow, 6, pow, 7]
[println: [4], pow: [4, 5], pow2: [5, 6], pow3: [6, 7]]
[println: [pow3], pow: [4, 5], pow2: [pow, 6], pow3: [pow2, 7]]
*/

// func (int i) print; // Uncommented for now because apparently Rust doesn't support this

func (int i) backwards_println {
	if true { // To test if statements
		println "{}" i;
	}
	
	if 9 + 10 == 21 {
		println "{}" false;
	} else if 9 + 10 != 21 {
		println "{}" true;
	} else {
		println "{}" false;
	}
}

func (int a) (int b) +++ (int c) (int d) -> int {
	a + b + c + d
}

func (int a) (int b) --- (int c) (int d) -> int {
	a + b - c - d
}

func init {
	(1 2 +++ 3 * 4 5)++ 6 --- 7 8 backwards_println;
}

/*
println: ---
---: +++
+++: *
*: 3, 4
+++: *, ++
++: 5,
+++: 1, 2, *, ++ <-- NOTE: You'll need to make sure it places 1 and 2 BEFORE * and ++ in cases like this
---: +++, 6, 7, 8
*/