box Array contains (_ Array)|Nothing

[(item) => Array {
	item
	Array {Nothing}
}

(Array {item Array {Nothing}}), (new_item) => Array {
	item
	Array {
		new_item
		Array {Nothing}
	}
}

] =>

box ByteThingy contains X|Y
box X contains Bit Bit Bit Bit Bit Bit Bit
box Y contains Bit Bit Bit Bit Bit Bit Bit

let arr = [
	ByteThingy {X {rand}},
	ByteThingy {Y {rand}}
];

(Array {item _})[0] => item
(Array {_ tail})[i] => tail[i - 1]

special print arr[0];
special print arr[rand between 0 and 1];

special print (ByteThingy bt) => if bt == X (
    println "X: " unwrap bt
) else (
    println "Y: " unwrap bt
)

--------------------------------------------------------------

box [b]               => (b =>)
box [b] contains [b2] => (b [b2] => b2)

box Zero
box PlusOne contains Nat n
box Nat contains Zero|(PlusOne n)

Zero                       =>
PlusOne [Nat n]            => Nat n
Nat     [Zero|(PlusOne n)] => Zero|(PlusOne n)

Zero                       [f] [x] => x
PlusOne [Nat n]            [f] [x] => f (n f x)
Nat     [Zero|(PlusOne n)] [f] [x] => (Zero f x) | (PlusOne n f x)

Nat Zero
Nat (PlusOne (Nat Zero))
Nat (PlusOne (Nat (PlusOne (Nat Zero)))) ([x] => x + "!") "hi"

PlusOne (Nat (PlusOne (Nat Zero))) f "hi"
f (PlusOne (Nat Zero) f "hi")
f (f (Zero f "hi"))
f (f "hi")
f ("hi" + "!")
("hi" + "!") + "!"
"hi!!"

Bool True => True
Bool False => False

True  [x] [_] => x
False [_] [y] => y

if [True] [body] => body
if [False] [_] =>
if [Bool b] [body] else [expr] => Bool b body expr