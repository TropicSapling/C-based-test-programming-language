box Array contains (_ Array)|Nothing

[(item) => Array {
	item
	Array {Nothing}
}

(Array {item Array {Nothing}}), (new_item) => Array {
	item
	Array {
		new_item
		Array {Nothing}
	}
}

] =>

box ByteThingy contains X|Y
box X contains Bit Bit Bit Bit Bit Bit Bit
box Y contains Bit Bit Bit Bit Bit Bit Bit

let arr = [
	ByteThingy {X {rand}},
	ByteThingy {Y {rand}}
];

(Array {item _})[0] => item
(Array {_ tail})[i] => tail[i - 1]

special print arr[0];
special print arr[rand between 0 and 1];

special print (ByteThingy bt) => if bt == X (
    println "X: " unwrap bt
) else (
    println "Y: " unwrap bt
)

--------------------------------------------------------------

box [b]               => (b =>)
box [b] contains [b2] => (b [b2] => b2)

box Zero
box PlusOne contains Nat n
box Nat contains Zero|(PlusOne n)

Zero                       =>
PlusOne [Nat n]            => Nat n
Nat     [Zero|(PlusOne n)] => Zero|(PlusOne n)

Zero                       [f] [x] => x
PlusOne [Nat n]            [f] [x] => f (n f x)
Nat     [Zero|(PlusOne n)] [f] [x] => (Zero f x) | (PlusOne n f x)

Nat Zero
Nat (PlusOne (Nat Zero))
Nat (PlusOne (Nat (PlusOne (Nat Zero)))) ([x] => x + "!") "hi"

PlusOne (Nat (PlusOne (Nat Zero))) f "hi"
f (PlusOne (Nat Zero) f "hi")
f (f (Zero f "hi"))
f (f "hi")
f ("hi" + "!")
("hi" + "!") + "!"
"hi!!"

Bool True => True
Bool False => False

True  [x] [_] => x
False [_] [y] => y

if [True] [body] => body
if [False] [_] =>
if [Bool b] [body] else [expr] => Bool b body expr

[a] == [a] => True
[_] == [_] => False

((Nat Zero) == (Nat Zero)) print "true" print "false" // like C's 'b ? t : f'

--------------------------------------------------------------

f $x
g $x $y $z

let [x, y, z] = [1, 2, 3];

take any func $f
take specific func (f)

take any args from any func ($g $x $y $z)
take any args from specific func (g $x $y $z)
take specific args from specific func (g x y z)

take any amount of args from specific func (g (Args $args))

Zero                            $f $x => x
PlusOne (Nat $n _ _)            $f $x => f (n f x)
Nat     (Zero|(PlusOne $n _ _)) $f $x => (Zero f x) | (PlusOne n f x)

--------------------------------------------------------------

while (False)     _              =>
while (Bool cond) (frozen $body) => (
	body;
	while cond body
)

(frozen $n)..(frozen $m) => n|(n + 1)|...|m

for (frozen $i) in ($start..$end) $body => (
	let i = start;
	while i < end body
)

$n % $m => (
	while n >= m (n -= m);
	n
)

for i in 1..100 (
	if i % 15 == 0 (
		print "FizzBuzz"
	) else if i % 3 == 0 (
		print "Fizz"
	) else print i
)

--------------------------------------------------------------

// Prelude test or something

#precedence below _
(_; =>);
(VarDecl $decl); => VarDecl decl;

(Nothing $f $x =>); // Parentheses not actually needed, just there to clarify

// Bool True|False
Bool True  $x _  => x;
Bool False _  $y => y;

let True  = Bool True;
let False = Bool False;

(True)   && (True)   => True;
(Bool _) && (Bool _) => False;

(False)  || (False)  => False;
(Bool _) || (Bool _) => True;

!(True) => False;
!(False) => True;

$a == $a => True;
_  == _  => False;
$a != $b => !(a == b);

// Nat Zero|(PlusOne (Nat _))
Zero                 $f $x => x;
PlusOne (Nat $n)     $f $x => f (n f x);
Nat     (Zero)       $f $x => Zero f x;
Nat     (PlusOne $n) $f $x => PlusOne n f x;

if (True)    $body            => body;
if (False)   _                =>     ;
if (Bool $b) $body else $expr => b body expr;

if (True)    then $body            => body;
if (False)   then _                =>     ;
if (Bool $b) then $body else $expr => b body expr;

category of ($b (ALL_ARGS b)) => b;
unbox       $b                => APPLIED_ARGS b;

$n mod $m => if n >= m (
	(n - m) mod m
) else n;

$n..$m => n|(n + 1)|...|m;

any ($b) => b (ALL_ARGS b);

if fulfilling (True)              $body => body;
if fulfilling (frozen $cond)      _     => if unfreeze cond == False (
	// continue to next function def if there is one, else panic
	continue from caller or alt prerun panic (format_err (format "Failed to fulfill condition '{}'" [stringify cond]))
) else panic (format_err "Contract is not a Bool");

if fulfilling (True)  $body else report _             => body;
if fulfilling (False) _     else report (String $msg) => continue from caller or alt prerun panic (format_err (String msg));

VarDecl _ _ => ;

let (frozen $var) = $val => VarDecl (($var => scope) val);

$n++ => (
	a += 1;
	a - 1
);

++$n => (
	a += 1;
	a
);

$n-- => (
	a -= 1;
	a + 1
);

--$n => (
	a -= 1;
	a
);

while (False)     _              => ;
while (Bool $cond) (frozen $body) => (
	body;
	while cond body
);

for (frozen $i) in ($start..$end) $body => (
	let i = start;
	while i < end (
		body;
		i++;
	)
);

remaining args of $f => ALL_ARGS f length - APPLIED_ARGS f length;

--------------------------------------------------------------

// Variadic function test
sumOf $x    => x;
sumOf $x $y => sumOf (x + y);

sumOf 1     => 1;
sumOf 1 2   => 3;
sumOf 1 2 3 => 6;

return statement => (True;);
return value     => True;

// FizzBuzz
for i in 1..100 (
	if i mod 15 == 0 (
		print "FizzBuzz"
	) else if i mod 3 == 0 (
		print "Fizz"
	) else print i
);

// Fun!
$f using $closure => if fulfilling remaining args of closure == 1 (
	f ((closure _) f)
);

memo _ => (
	let cache = [];
	
	$f $next $x => if cache.x exists (
		cache.x
	) else f (next) x
);

fibY $next $n => if n < 2 (
	1
) else next (next) (n - 2) + next (next) (n - 1);

fibMemo $n => (fibY using memo) n;

fibMemo 5; // 8

// Testing
blueprint (Nat) => Nat Zero|(PlusOne (Nat _));

// Scott encoding
A a b ... | B c d ... | ...

A $a $b ... $x $y ... => x a b ...
B $c $d ... $x $y ... => y c d ...
...

// Ex:
Bool True|False

True  $x $y => x
False $x $y => y

b
	=> 1
	=> 0

// Ex 2:
Nat Zero|(PlusOne (Nat _))
(Nat Zero)|(Nat PlusOne (Nat _))

Nat $a    $x $y => x a
Nat $c $d $x $y => y c d

Nat Zero             $x $y => x
Nat PlusOne (Nat $c) $x $y => y c

match n {
	Nat Zero             => 0
	Nat PlusOne (Nat $n) => n
}

n
	   => 0
	$n => n

n
	(Zero)             => 0
	(PlusOne) (Nat $n) => n

$a $b    $x $y => x a b
$c $d $e $x $y => y c d e

(Nat) (Zero)             $x $y => x Nat Zero
(Nat) (PlusOne) (Nat $c) $x $y => y Nat PlusOne (Nat c)

n
	(Nat) (Zero)             => 0
	(Nat) (PlusOne) (Nat $n) => n

if (True)  then $body else $expr $x $y => x True  body expr
if (False) then $body else $expr $x $y => y False body expr

ifte
	(True)  $body $expr => True
	(False) $body $expr => False

if (True)  then $body else $expr ($x matches if (True) then $b else $c) _  => x True body expr
if (False) then $body else $expr _ ($y matches if (False) then $b else $c) => y False body expr

ifte
	if (True)  then $body else $expr => True // order matters! how to make it not matter?
	if (False) then $body else $expr => False

// Anonymous pattern matching
(
	f (1) => 4;
	f (2) => 5;
	f (3) => 6;
	
	f
) 2; // 5

([
	f (1) => 4,
	f (2) => 5,
	g (3) => 6
]; g 3) // 6

match $x with $patterns => if fulfilling patterns == any List (
	patterns; x
);

match g 3 with [
	f (1) => 4,
	f (2) => 5,
	g (3) => 6
] // 6

match 2 with [
	(1) => 4,
	(2) => 5,
	(3) => 6
] // 5

(((123) => 456); 123)

// Some sort of lambda-pattern calculus
((let untyped $var = $val; as #var #val) => scope) ((frozen $var) $val => ((var as frozen val) => scope) val)

let untyped (untyped func (frozen $pattern) returns $body;) = $pattern $body => frozen (let untyped pattern = ALL_ARGS pattern => body;);

// transparent makes this function both stay unevaluated and evaluate when all non-transparent args are applied? (superposition? xD)
untyped func Var $val $type (transparent _) returns val;

untyped func (Var $val $type) = $new_val returns if fulfilling new_val is type (
	__ASSIGN__ (Var val type) (Var new_val type)
);

untyped func category of ($b (ALL_ARGS b)) returns b;
untyped func unbox        $b               returns APPLIED_ARGS b;

untyped func (let (frozen $var): $type = $val) returns frozen (let untyped var = Var val type;); // TODO: check if $type unstrictly equals $val
untyped func (let (frozen $var): auto  = $val) returns frozen (let var: category of val = val;);
untyped func (let (frozen $var)        = $val) returns frozen (let var: val = val;);

untyped func (func (frozen $pattern) returns $body: $type) returns frozen (let pattern: type = ALL_ARGS pattern => body;);

// Examples
let n: Int = 123;

func $a plus $b returns a + b: Int;

--------------------------------------

// returns f c = f 456 = fu 123 nc 456
((f $b as fu ($a as 123) nc #b) $c => f c) (fu 123 nc) 456 // '$a': store applied arg in 'a'. '#b': link unapplied arg to '$b'

// New try
((let untyped $var = $val; as #var #val) => scope) ((frozen $var) $val => ((var as frozen val) => scope) val)

let untyped (untyped func (frozen $pattern) returns $body;) = $pattern $body => frozen (let untyped pattern = ALL_ARGS pattern => body;);

// 'transparent _' makes this function run if it fails all pattern matches
untyped func (Typed $expr _): $type returns expr: type; // allows for stuff like '(123: 0..): Int'
untyped func           $expr: $type returns if fulfilling expr is type (
	Typed expr type
);

untyped func Typed $expr $type (transparent _) returns expr; // is 'transparent' needed?

untyped func (frozen $var): $type = $new_val returns __ASSIGN__ var (new_val: type);

untyped func category of ($b (ALL_ARGS b)) returns b;
untyped func unbox        $b               returns APPLIED_ARGS b;

untyped func (let (Typed $var $type)   = $val)   returns frozen (let untyped var = val: type;);
untyped func (let (frozen $var): auto  = $val)   returns frozen (let var: category of val = val;);
untyped func (let (frozen $var)        = $val)   returns frozen (let var: val = val;);

untyped func (func (frozen $pattern) returns $body) returns frozen (let pattern = ALL_ARGS pattern => body;);

// Examples

let n: Int = 123;
// is equivalent to
let untyped n = 123: Int;

((123 + 456): Int; "hello": String): String // any expr can have a type
"world": Int // this returns an error

func (($a: Number) plus ($b: Number)): Function returns (
	a + b
): Number;

$a plus $b = $a $b => 123;

—————————————————————————————

listify 1|2|3 != 1|2|3

f $a => a + 1;

f 1|2|3 => 2|3|4;

1 == 1|2|3
1|2|3 != 1 (necessarily)

g (1|2|3) vs. g (listify 1|2|3)

h _ <=> h (a|b|...)

1 == 1|2|3 => True|False
1|2|3 == 1 => True|False

1 is (listify 1|2|3) => True
(listify 1|2|3) is (listify 1) => False

- x = 1|2|3 where x will be one of
- f (1|2|3) where f takes one of
- g (1|2|3) where f takes all as list
- x: 1|2|3 where x has all as type (list)
