box Array contains (_ Array)|Nothing

[(item) => Array {
	item
	Array {Nothing}
}

(Array {item Array {Nothing}}), (new_item) => Array {
	item
	Array {
		new_item
		Array {Nothing}
	}
}

] =>

box ByteThingy contains X|Y
box X contains Bit Bit Bit Bit Bit Bit Bit
box Y contains Bit Bit Bit Bit Bit Bit Bit

let arr = [
	ByteThingy {X {rand}},
	ByteThingy {Y {rand}}
];

(Array {item _})[0] => item
(Array {_ tail})[i] => tail[i - 1]

special print arr[0];
special print arr[rand between 0 and 1];

special print (ByteThingy bt) => if bt == X (
    println "X: " unwrap bt
) else (
    println "Y: " unwrap bt
)

--------------------------------------------------------------

box [b]               => (b =>)
box [b] contains [b2] => (b [b2] => b2)

box Zero
box PlusOne contains Nat n
box Nat contains Zero|(PlusOne n)

Zero                       =>
PlusOne [Nat n]            => Nat n
Nat     [Zero|(PlusOne n)] => Zero|(PlusOne n)

Zero                       [f] [x] => x
PlusOne [Nat n]            [f] [x] => f (n f x)
Nat     [Zero|(PlusOne n)] [f] [x] => (Zero f x) | (PlusOne n f x)

Nat Zero
Nat (PlusOne (Nat Zero))
Nat (PlusOne (Nat (PlusOne (Nat Zero)))) ([x] => x + "!") "hi"

PlusOne (Nat (PlusOne (Nat Zero))) f "hi"
f (PlusOne (Nat Zero) f "hi")
f (f (Zero f "hi"))
f (f "hi")
f ("hi" + "!")
("hi" + "!") + "!"
"hi!!"

Bool True => True
Bool False => False

True  [x] [_] => x
False [_] [y] => y

if [True] [body] => body
if [False] [_] =>
if [Bool b] [body] else [expr] => Bool b body expr

[a] == [a] => True
[_] == [_] => False

((Nat Zero) == (Nat Zero)) print "true" print "false" // "like C's 'b ? t : f'"

--------------------------------------------------------------

f $x
g $x $y $z

let [x, y, z] = [1, 2, 3];

take any func $f
take specific func (f)

take any args from any func ($g $x $y $z)
take any args from specific func (g $x $y $z)
take specific args from specific func (g x y z)

take any amount of args from specific func (g (Args $args))

Zero                            $f $x => x
PlusOne (Nat $n _ _)            $f $x => f (n f x)
Nat     (Zero|(PlusOne $n _ _)) $f $x => (Zero f x) | (PlusOne n f x)

--------------------------------------------------------------

while (False)     _              =>
while (Bool cond) (frozen $body) => (
	body;
	while cond body
)

$n..$m => n|(n + 1)|...|m

for (frozen $i) in ($start..$end) $body => (
	let i = start;
	while i < end body
)

$n % $m => (
	while n >= m (n -= m);
	n
)

for i in 1..100 (
	if i % 15 == 0 (
		print "FizzBuzz"
	) else if i % 3 == 0 (
		print "Fizz"
	) else print i
)