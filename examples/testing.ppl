type Nat Zero|(Suc Nat);
type Bool True|False;

let Zero = Nat Zero;
let Suc = Nat Suc;
let True = Bool True;
let False = Bool False;

let n = Nat n;
let m = Nat m;

// _+_
Zero + n => n;
n + Zero => n;

Suc n + m => Suc (n + m);
n + Suc m => Suc (n + m);

// _+=_
a += b => a = a + b;

// !_
!True => False;
!False => True;

// _==_
a == b => True|False;

// _!=_
a != b => !(a == b);

// _||_
False || False => False;
True  || False => True;
False || True  => True;
True  || True  => True;

// _&&_
False && False => False;
True  && False => False;
False && True  => False;
True  && True  => True;

// if__
if True body => body;
if False body => Nothing;

// if__else_
if True body else expr => body;
if False body else expr => expr;

// rand__
rand (Nat start) (Nat end) => Nat start|(Suc Nat start)|...end SYS_RAND start end;

// println_
println _ => Void;

// _backwards println
(n = 2|3|...) backwards println => {
	if True println n; // To test single-line if statements
	
	if 9 + 10 == 21 || 10 + 9 == 21
		println False
	else if 9 + 10 != 21 && !(10 + 9 == 21)
		if True { // To test nested if statements
			println True;
			println True;
		}
	else
		println False;
	
	println n;
};

// _[]
typ [] => Array typ 0 Void;

// [_
[(typ item) => {
	let addr = malloc (item size);
    @addr = item;
    Array typ 1 addr
};

// _,_
Array (typ (len = 1|2|...) addr), (typ item) => {
	let addr = realloc addr (len + 1) * (typ size);
    @(addr + len * (typ size)) = item;
    Array typ (len + 1) addr
};

// ]
] => Void;

// _+_
Array arr + item => arr, item;

// _length
Array (_ len _) length => len;

// _[_]
Array (typ) 1|2|... (addr)[Nat (i)] => @(addr + (typ size) * i);

// init
init => {
	let n = Suc Zero; // same as 1
	n += rand Zero (Suc Zero); // n = Suc (Zero|(Suc Zero)) which is the same as 1|2
	
	backwards_println n; // Won't compile, since n must be 2 or more but that can't be guaranteed; n could be either 1 or 2
	
	let numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

	println numbers[4]; // 4

	if rand 0 1 == 1
		numbers += 10;

	// numbers = Array Nat 10|11 <addr>

	println numbers length; // will print either 10 or 11
};