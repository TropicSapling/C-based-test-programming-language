decl symblock sb_line_comment  enclosed by // \n; // '\n' means newline here
decl symblock sb_multi_comment enclosed by /* */; // automatically nestable, since enclosers are different

decl symblock __sb_default_str__ enclosed by " " with escaper \; // "escape like \"this\""

// The behaviour of symblocks default to nothing before they are defined*.
// But if you want to have some other behaviour, these things are good to know:
// - Anything between the enclosers of a symblock can be captured for function input.
// - Captured symbols will be implicitly permafrosted, which must be marked.
// - To do something with captured symbols, use 'stringify <var holding symbols>'.

// Just for practice, below we define multi-line comments to print their contents:
impure func sb_multi_comment ($comment as implicitly permafrosted) {
	println (stringify comment);
};

/*
    This comment is one big token.
    Everything inside, along with the /*enclosers*/, will be printed!
*/

extend symgroup __sg_ops__ with + - * /; // ex tokens: `+`, `++`, `+-`, `**`

// Make everything lists instead?

decl symindies { } [ ]; // ex tokens: `{`, `}`, `[`, `]`

// Now we can define a number range function!
func $n..$m {
	n|(n + 1)|...|m
};

15..25 // => `15|16|...|25`

// *Except for strings. Strings have built-in behaviour tied to `__sb_default_str__`.