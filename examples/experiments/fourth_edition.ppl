// "Strings"
// "mapped to built-in string literals by default"
// "btw, as you can see, it's possible to use functions or boxes before they are defined,
	as long as they're not defined in another scope (obviously)"

box String;

// (String str) => ; // "when you realise you can define commenting as a function O_o"

// "Natural numbers"
box Zero;
box PlusOne contains Nat;
box Nat contains Zero|PlusOne;

(Nat (Zero)) + (Nat n) => Nat n;
(Nat (PlusOne n)) + (Nat m) => Nat (PlusOne (n + Nat m));

(m) + (n) => n + m;
(a) += (b) => a = a + b;

// "Bits & bytes"
box Zero;
box One;
box Bit contains Zero|One;
box Byte contains Bit Bit Bit Bit Bit Bit Bit Bit;

box Signed;
box Unsigned;
box Int contains Signed|Unsigned Byte Byte Byte Byte Byte Byte Byte Byte;

// "Booleans"
box Bool contains True|False;

let True = Bool (True);
let False = Bool (False);

!(True) => False;
!(False) => True;

(False) || (False) => False;
(Bool _) || (Bool _) => True;

(True) && (True) => True;
(Bool _) && (Bool _) => False;

(val) == (val) => True;
(_) == (_) => False;

(a) != (b) => !(a == b);

if (True) (body) => body;
if (False) (_) => ;
if (True) (body) else (_) => body;
if (False) (_) else (expr) => expr;

// "Constant & unique boxes"
transparent box Const contains _; // "or 'jelly box'? actually a bit more fitting xD"
transparent box Unique contains _;

(Const _) = (_) => prerun panic "Cannot modify constant value";
(_) = (Unique _) => prerun panic "Cannot reassign unique value";

category of (Const b) => Const (category of b);
category of (Unique b) => Unique (category of b);

// "Arrays"
box Array contains (func<1> _) Int Int Int; // "Array (condf esize len addr)"

[] where each element is of size (esize) and fulfills (func<1> condf) => Array (condf esize 0 0);
(Array (_ esize n m)) fulfills (func<1> condf) => Array (condf esize n m);

[(item) => {
	let addr = malloc (item size);
	@addr = item;
	Array (((i) => (i == category of item)) (item size) 1 addr)
};

(Array (condf esize len addr)), (item) => if fulfilling condf item {
	let addr = realloc addr (len + 1) * esize;
    @(addr + len * esize) = item;
    Array (condf esize (len + 1) addr)
};

] => ;

(Array arr) + (item) => Array arr, item;

(Array (condf _ _ _)) item contract => condf;
(Array (_ esize _ _)) item size => esize;
(Array (_ _ len _)) length => len;
(Array (_ _ _ addr)) address => addr;

(Array (_ esize len addr))[i] => if fulfilling len == 1|2|... && i == Int {
	@(addr + esize * i)
};

// "Linked lists"
box LinkedList contains (_ LinkedList)|Nothing;

-[] => LinkedList (Nothing);
-[(item) => LinkedList (item LinkedList (Nothing));

(LinkedList (item LinkedList (Nothing))), (new_item) => LinkedList (item LinkedList (new_item LinkedList (Nothing)));
(LinkedList (item next)), (new_item) => LinkedList (item (next, new_item));

(LinkedList list) + (item) => LinkedList list, item;

(LinkedList (Nothing)) length => 0;
(LinkedList (_ next)) length => next length + 1;

]- => ;

// "Misc."
box Nothing;

category of (b _) => b; // "default behavior, can be overriden (as done above)"
unbox (_ b) => b;
println (_) => ;

rand between (start) and (end) => if fulfilling start == Nat && end == Nat {
	start|(Nat (PlusOne start))|...|end
};

// "Example extension"
transparent box Safe contains Array;

(Safe arr)[i] => if fulfilling len == 1|2|... && i == 0|1|...|(arr length - 1) {
	@((arr address) + (arr item size) * i)
};

// "Example usage"
(n) backwards_println => if fulfilling n == only 2|3|... { // "'only' keyword makes sure 1|2 isn't allowed; it must be possible to guarantee at compile time that this check won't fail"
	if True println n; // "To test single-line if statements"
	
	if 9 + 10 == 21 || 10 + 9 == 21
		println False
	else if 9 + 10 != 21 && !(10 + 9 == 21)
		if True { // "To test nested if statements"
			println True;
			println True;
		}
	else
		println False;
	
	println n;
}

init => {
	let n = PlusOne (Zero); // "representing 1"
	n += rand between Zero and PlusOne (Zero); // "n = Nat (PlusOne (Nat (Zero|(PlusOne (Nat (Zero)))))) a.k.a. 1 or 2"
	
//	"backwards_println n; // won't compile, since n must be 2 or more but that can't be guaranteed; n could be either 1 or 2"
	
	let numbers = Unique (Safe ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));

	println numbers[4]; // "4"

	if rand between 0 and 1 == 1
		numbers += 10;

	// "numbers = Unique (Safe (Array (((i) => (i == Int)) 10|11 addr)))"

	println numbers length; // "will print either 10 or 11"
	
//	"let num = numbers; // won't compile, since 'numbers' is unique and can't be referenced multiple times
	let num = numbers[12]; // neither will this because it's a Safe Array and index is out of bounds
	let num = numbers[11]; // this would however compile, because it might be inside bounds and would panic during runtime if not"
	
	let le_intersect = (0|1|...|8)&(4|5|...|16); // "=> 4|5|...|8"
};