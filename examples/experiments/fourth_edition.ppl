// Natural numbers
box Zero; // btw, might as well make this equivalent to 'box Zero contains Nothing' by making 'Nothing' built-in
box PlusOne contains Nat;
box Nat contains Zero|PlusOne;

(Nat Zero) + (Nat n) => Nat n;
(Nat (PlusOne n)) + (Nat m) => Nat (PlusOne (n + Nat m));

// Bits & bytes
box Zero;
box One;
box Bit contains Zero|One;
box Byte contains Bit Bit Bit Bit Bit Bit Bit Bit;

box Signed;
box Unsigned;
box Int contains Signed|Unsigned Byte Byte Byte Byte Byte Byte Byte Byte;

// Booleans
box Bool contains True|False;

let True = Bool True;
let False = Bool False;

!(True) => False;
!(False) => True;

(False) || (False) => False;
(Bool _) || (Bool _) => True;

(True) && (True) => True;
(Bool _) && (Bool _) => False;

(val) == (val) => True;
(_) == (_) => False;

(a) != (b) => !(a == b);

if (True) (body) => body;
if (False) (body) => Nothing;
if (True) (body) else (expr) => body;
if (False) (body) else (expr) => expr;

// Constant & unique boxes
transparent box Const contains _; // or 'jelly box'? actually a bit more fitting xD
transparent box Unique contains _;

(Const _) = (_) => prerun panic "Cannot modify constant value";
(_) = (Unique _) => prerun panic "Cannot reassign unique value";

// Macros
(m) + (n) => n + m;
(a) += (b) => a = a + b;

// Misc.
box Nothing;

unbox (b _) => b;

println (_) => Nothing;

(n) backwards_println => if fulfilling n == 2|3|... {
	if True println n; // To test single-line if statements
	
	if 9 + 10 == 21 || 10 + 9 == 21
		println False
	else if 9 + 10 != 21 && !(10 + 9 == 21)
		if True { // To test nested if statements
			println True;
			println True;
		}
	else
		println False;
	
	println n;
	
	Nothing
}

init => {
	let n = PlusOne Zero; // representing 1
	n += rand Zero (PlusOne Zero); // n = Nat (PlusOne (Nat (Zero|PlusOne (Nat Zero)))) a.k.a. 1 or 2
	
	backwards_println n; // won't compile, since n must be 2 or more but that can't be guaranteed; n could be either 1 or 2 (EDIT: or perhaps make it compile but fail at runtime 50/50?)
	
	let numbers = Unique [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

	println numbers[4]; // 4

	if rand 0 1 == 1
		numbers += 10;

	// numbers = Array {type = Nat, len = 10|11, addr}

	println numbers length; // will print either 10 or 11
	
	let num = numbers; // won't compile, since 'numbers' is unique and can't be referenced multiple times
	
	let le_intersect = (0|1|...|8)&(4|5|...|16); // => 4|5|...|8
};