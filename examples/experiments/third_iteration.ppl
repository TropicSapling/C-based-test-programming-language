// Natural numbers
val Zero;
val Suc holds Zero|Nat;
val Nat holds Zero|Suc;

//use Nat, Suc; // no need for this, since it's done automatically in the scope where they are defined

(Zero) + (n = Nat) => n;
(n = Nat) + (Zero) => n;
(Suc n) + (m = Nat) => Suc (n + m); // no need for (n = Nat) since Suc always holds Nat
(n = Nat) + (Suc m) => Suc (n + m);

(a) += (b) => a = a + b;

rand (start = Nat) (end = Nat) => start|(Suc start)|...end;

// Bits & bytes
val Bit holds 0|1;
val Byte holds Bit, Bit, Bit, Bit, Bit, Bit, Bit, Bit;
val Int holds Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte;

// Booleans
val Bool holds True|False;

!(True) => False;
!(False) => True;

(value) == (value) => True;
(_) == (_) => False;

(a) != (b) => !(a == b);

(False) || (False) => False;
(Bool _) || (Bool _) => True;

(True) && (True) => True;
(Bool _) && (Bool _) => False;

if (True) (body) => body;
if (False) (body) => Nothing;
if (True) (body) else (expr) => body;
if (False) (body) else (expr) => expr;

// Printing
println (_) => Nothing;

(n = 2|3|...) backwards_println => {
	if True println n; // To test single-line if statements
	
	if 9 + 10 == 21 || 10 + 9 == 21
		println False
	else if 9 + 10 != 21 && !(10 + 9 == 21)
		if True { // To test nested if statements
			println True;
			println True;
		}
	else
		println False;
	
	println n;
	
	Nothing
}

// Arrays
val Array holds {
	type,
	len = Nat,
	addr = Nat
};

val Array holds (type = _) (len = Nat) (addr = Nat);

(type) [] => Array {type = type, len = 0, addr = 0};
(type) [(item) => {
	let addr = malloc (item size);
	@addr = item;
	Array {type = type, len = 1, addr = addr}
};

[(item) => (detype item) [item;
] => Nothing;

detype (type _) => type;

(Array {type: typ, len = 1|2|..., addr}), (item) => if detype item == typ { // 'type: typ' here is pointless, but it's just to demonstrate that you can "rename" stuff
	let addr = realloc addr (len + 1) * (typ size);
    @(addr + len * (typ size)) = item;
    Array {type = typ, len = len + 1, addr = addr}
} else panic "Invalid type";

(arr = Array) + (item) => arr, item; // good luck on preventing this from conflicting with value structs
(Array {len}) length => len;

(Array {type, len = 1|2|..., addr})[i = Nat] => @(addr + (type size) * i);

// Misc.
(_) = (Unique _) => prerun panic "Cannot reassign unique value";

init => {
	let n = Suc Zero; // same as 1
	n += rand Zero (Suc Zero); // n = Nat (Suc (Nat (Zero|Suc (Nat Zero)))) which is the same as 1|2
	
	backwards_println n; // won't compile, since n must be 2 or more but that can't be guaranteed; n could be either 1 or 2 (EDIT: or perhaps make it compile but fail at runtime 50/50?)
	
	let numbers = Unique ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);

	println numbers[4]; // 4

	if rand 0 1 == 1
		numbers += 10;

	// numbers = Array {type = Nat, len = 10|11, addr}

	println numbers length; // will print either 10 or 11
	
	let num = numbers; // won't compile, since 'numbers' is unique and can't be referenced multiple times
	
	let le_intersect = (0|1|...|8)&(4|5|...|16); // => 4|5|...|8
};