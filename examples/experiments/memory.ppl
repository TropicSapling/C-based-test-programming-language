//
"
MEM LAYOUT
----------
4-8 bytes BoxID
...
"

//
"
ISSUES
------
* Use after free
* Null pointer dereference
* Using uninit mem
* Double free
* Buffer overflow
* Concurrency stuff ...
------
This experiment aims to solve these issues.
"

// "The stack and the heap"
box GrainsOfSand contains Nothing|Grain|(Grain Grain)
box Grain

box SupermassiveBlackHole contains TonsOfMatter|(Pointer {TonsOfMatter})
box TonsOfMatter contains Nothing|TonsOfMatter

// "2 grains of sand are small, so they fit well on the stack"
let grains_of_sand = GrainsOfSand {Grain Grain};

// "Get all contents of grains_of_sand"
grains_of_sand // "=> GrainsOfSand {Grain Grain}"

// "A supermassive black hole is way too big, and it keeps growing, so it's better to put it on the heap"
// "If we didn't use malloc, it would try to put this on the stack anyway"
let M87_black_hole = SupermassiveBlackHole {malloc TonsOfMatter {TonsOfMatter {TonsOfMatter {...}}} with access size 2}; // "we can't @ptr without specifying how many bytes we want"

// "Get first 2 bytes of M87_black_hole (as per the access size specified above)"
// "TODO: Figure out what exactly the first 2 bytes will contain"
@(unbox M87_black_hole)

f (Pointer {TonsOfMatter m}) => m // "m moved from heap to stack suddenly??? TODO: figure out how to fix this"

// "Use after free: solved by auto free at end of scope"
let (frozen var) = (Heap val) => VarDecl {
	((var) =>
		let expr = scope;
		free ->var;
		expr
	) Heap val
}

let (frozen var) = (val) => VarDecl {((var) => scope) val}

// "Null pointer dereference: solved by forcing compile-time pointer checks"
transparent box Pointer contains _

@(Pointer ptr) => if fulfilling prerun ptr != 0 (
	...
)

// "Using unit mem: TMP solved by not allowing unit mem creation"

// "Double free: solved by ???"

// "Buffer overflow: solved by ???"