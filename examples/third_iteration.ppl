// Natural numbers
val Zero;
val Suc holds Zero|Suc;

let Nat = Zero|Suc;

Zero + (n = Nat) => n;
(n = Nat) + Zero => n;

Suc n + (m = Nat) => Suc (n + m); // no need for (n = Nat) since Suc always holds Nat
(n = Nat) + Suc m => Suc (n + m);

a += b => a = a + b;

rand (start = Nat) (end = Nat) => start|(Suc start)|...end;