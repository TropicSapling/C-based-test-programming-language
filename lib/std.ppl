#export
pointer*2 split(pointer listp, splitter) {
	pointer*2 arr -> {listp};
	
	unsigned int i = 0;
	while(i < listp<length>) if(listp[i >>> i + splitter<length>] == splitter) {
		listp<length> = i + 1;
		listp = ->(listp[i + 1]);
		arr[>>>] += listp;
	}
	
	return arr;
}
#endexp

// To import the function below: 'import <std>.fastReplace'
void fastReplace(pointer listp, toReplace, replacer) {
	unsigned int i = 0;
	while(i < listp<length>) if(listp[i] == toReplace) listp[i] = replacer;
}

#export
void replace(pointer listp, toReplace, replacer) {
	if(toReplace<length> == replacer<length>) while(i < listp<length>) {
		if(listp[i] == toReplace) listp[i] = replacer;
	} else while(i < listp<length>) if(listp[i >>> i + toReplace<length>] == toReplace) {
		move(->(listp[i]), replacer<length> - toReplace<length>);
		listp[i >>> i + replacer<length> - toReplace<length>] = replacer;
		i += toReplace<length> - 1;
	}
}

void move(pointer listp, int steps) {
	steps < 0 ? listp[>>> listp<length> - steps] = listp[__item + steps] : listp[steps >>> listp<length> + steps] = listp[__item - steps];
}

void rotBits(pointer bitsp, rots, size) {
	bitsp = (bitsp << rots) | (bitsp >> (-rots & size));
}

void delItems(pointer firstItem, int count = 1) {
	move(firstItem, -count);
	listp<length> -= count;
}

int array findItems(pointer listp, toFind, int count = 0) {
	unsigned int i = 0;
	int array foundItems = [];
	if(count > 0) {
		while(i < listp<length> && foundItems<length> < count) if(listp[i] == toFind) foundItems += i;
	} else {
		while(i < listp<length>) if(listp[i] == toFind) foundItems += i;
	}
	
	return foundItems;
}

bool print(obj) { // Currently works for all types except floating points, but integers must be max. 4 bytes
	clang int cprint(pointer p) {
		#include <stdio.h>
		
		printf("%p", p);
	}
	
	clang int cprint(char c) {
		#include <stdio.h>
		
		printf("%c", c);
	}
	
	clang int cprint(number n) {
		#include <stdio.h>
		
		printf("%d", n);
	}
	
	if(->obj<type> == array|list) {
		unsigned int n = 0;
		while(n < ->obj<length>) {
			if(cprint((->obj)[n]) == -1) {
				return 1;
			}
			
			n++;
		}
		
		return 0;
	} else if(obj<size> % 8) {
		unsigned int i = 0;
		while(i < obj<size>) {
			if(cprint(obj>i<) == -1) {
				return 1;
			}
			
			i++;
		}
	} else {
		return cprint(obj) == -1;
	}
}

clang void pause(int sec, int <size>=32 ns = 0) {
	#ifdef _WIN32
		#include <windows.h>
		
		Sleep(sec * 1000 + ns / 1000000);
	#else
		#include <time.h>
		
		struct timespec stime;
		stime.tv_sec = sec;
		stime.tv_nsec = ns;
		
		nanosleep(stime, NULL);
	#endif
}
#endexp
