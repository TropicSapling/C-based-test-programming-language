export split, fastReplace, replace, move, delItem;

pointer*2 split(pointer list, splitter) {
	pointer*2 arr -> [];
	if(list[>>>] == splitter) {
		arr += list[__item + 1];
	}
	
	return arr;
}

void fastReplace(pointer list, toReplace, replacer) {
	if(list[>>>] == toReplace) list[__item] = replacer;
}

void replace(pointer list, toReplace, replacer) {
	if(toReplace<length> == replacer<length>) {
		if(list[>>>] == toReplace) list[__item] = replacer;
	} else {
		if(list[>>>] == toReplace) {
			move(->(list[__item]), replacer<length> - toReplace<length>);
			list[__item >>> __item + replacer<length> - toReplace<length>] = replacer[>>>]; // NEEDS TO BE FIXED
		}
	}
}

void move(pointer list, int steps) {
	unsigned int i = 0;
	if(steps < 0) {
		while(i < list<length> - steps) {
			list[i] = list[i + steps];
			i++;
		}
	} else {
		while(i < list<length> + steps) {
			list[i + steps] = list[i];
			i++;
		}
	}
}

void delItems(pointer firstItem, int count) {
	move(firstItem, -count);
    list<length> -= count;
}
