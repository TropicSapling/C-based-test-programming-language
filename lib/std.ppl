type LoopBreak, LoopContinue extends *;

export {
	macro def_macro (m) as (expr) {
		return macro m {
			return expr;
		};
	}
	
	macro (f)? { // Error forwarding, example: `(fs.readFile "file")?` returns file contents if read is successful, else returns error
		return {
			let res = f;
			if res.Type == Type.Error {
				return res;
			} else {
				res
			}
		};
	}
	
	macro (list arr) index_of (unsigned int i) (check) { // Example: `let my_list = [[1, 2], [2, 3], [3, 4]]; println my_list index_of (x) (my_list[x][0] == 2)` prints '1'
		return {
			for [let i = 0; i < arr length; i++] {
				if check {
					return i;
				}
			}
			
			-1
		};
	}
	
	func (unsigned int n)! -> unsigned int { // Factorial, example: `5!` -> `5*4*3*2` -> `120`
		if n <= 2 {
			return n;
		}
		
		n * (n - 1)!
	}
	
	func $while (func pointer cond) (func pointer body) -> * { // '*' means any type
		if @cond {
			let res = @body;
			if res.Type == LoopBreak {
				return res;
			} else if res.Type != LoopContinue {
				return res from ..;
			}
			
			$while cond body
		}
	}

	macro while (cond) (body) {
		return $while func { cond } func { body };
	}
	
	macro for [init, check, change] (body) {
		return {
			init;
			while check {
				body;
				change;
			}
		};
	}
	
	macro break (val) {
		return return (LoopBreak) val;
	}
	
	def_macro continue as return (LoopContinue) void;
	
	macro get_bit (b) of (bytes) { // Notice that which bit you get depends on if it's little-endian or big-endian
		return (bytes >> b) & 1;
	}
	
	macro set_bit (b) of (bytes) to (b2) { // Notice that which bit you set depends on if it's little-endian or big-endian
		if b2 == 0 {
			return bytes &= ~(1 << b);
		} else return bytes |= (bytes >> b) & 1;
	}
	
	macro change_bit (b) of (bytes) to (b2) { // This is different from 'set_bit' in that it doesn't store the result in a variable
		if b2 == 0 {
			return bytes & ~(1 << b);
		} else return bytes | (bytes >> b) & 1;
	}
}

// OLD SYNTAX BELOW, NEEDS UPDATING

#export;
pointer*2 split(pointer listp, splitter) {
	pointer*2 arr -> {listp};
	
	unsigned int i = 0;
	while(i < listp<length>) {
		if(listp[i >>> i + splitter<length>] == splitter) {
			listp<length> = i + 1;
			listp = ->(listp[i + 1]);
			arr[>>>] += listp;
		}
		
		i++;
	}
	
	return arr;
}
#endexp;

// To import the function below: 'import <std>.fastReplace'
void fastReplace(pointer listp, toReplace, replacer) {
	foreach item in listp {
		if(item == toReplace) item = replacer;
	}
}

#export;
void replace(pointer listp, toReplace, replacer) {
	unsigned int i = 0;
	
	if(toReplace<length> == replacer<length>) while(i < listp<length>) {
		if(listp[i] == toReplace) listp[i] = replacer;
		i++;
	} else while(i < listp<length>) {
		if(listp[i >>> i + toReplace<length>] == toReplace) {
			move(->listp[i], replacer<length> - toReplace<length>);
			listp[i >>> i + replacer<length> - toReplace<length>] = replacer;
			i += toReplace<length> - 1;
		}
		
		i++;
	}
}
#endexp;

void fastCopy(pointer dest, pointer src, unsigned int c) {
	unsigned int i = 0;
	while(c--) {
		dest[i] = src[i];
		i++;
	}
}

#export;
void copy(pointer dest, pointer src, unsigned int c) {
	pointer tmp = ->dest[>>> c];
	
	fastCopy(tmp, src, c);
	fastCopy(dest, tmp, c);
}

void move(pointer listp, int steps) {
	copy(listp, listp - steps, (listp - steps)<length>);
}

void rotBits(pointer bitsp, int rots, int size) {
	bitsp = (bitsp << rots) | (bitsp >> (-rots & size));
}

void delItems(pointer firstItem, int count = 1) {
	move(firstItem, -count);
	listp<length> -= count;
}

int array findItems(pointer listp, toFind, int count = 0) {
	unsigned int i = 0;
	int array foundItems = [];
	if(count > 0) {
		while(i < listp<length> && foundItems<length> < count) {
			if(listp[i] == toFind) foundItems += i;
			i++;
		}
	} else {
		while(i < listp<length>) {
			if(listp[i] == toFind) foundItems += i;
			i++;
		}
	}
	
	return foundItems;
}

bool print(obj) { // Currently works for all types except floating points, but integers must be max. 4 bytes
	clang int cprint(pointer p) {
		#include <stdio.h>
		
		printf("%p", p);
	}
	
	clang int cprint(char c) {
		#include <stdio.h>
		
		printf("%c", c);
	}
	
	clang int cprint(number n) {
		#include <stdio.h>
		
		printf("%d", n);
	}
	
	if(->obj<type> == array|list) {
		unsigned int n = 0;
		while(n < ->obj<length>) {
			if(cprint((->obj)[n]) == -1) {
				return 1;
			}
			
			n++;
		}
		
		return 0;
	} else if(obj<size> % 8) {
		unsigned int i = 0;
		while(i < obj<size>) {
			if(cprint(obj>i<) == -1) {
				return 1;
			}
			
			i++;
		}
	} else {
		return cprint(obj) == -1;
	}
}

clang void pause(int sec, int <size>=32 ns = 0) {
	#ifdef _WIN32
		#include <windows.h>
		
		Sleep(sec * 1000 + ns / 1000000);
	#else
		#include <time.h>
		
		struct timespec stime;
		stime.tv_sec = sec;
		stime.tv_nsec = ns;
		
		nanosleep(stime, NULL);
	#endif
}
#endexp;
