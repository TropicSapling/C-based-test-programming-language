// --------------------------------------------------
// |                  THE PRELUDE                   |
// --------------------------------------------------

// TODO: Put the basic things that are needed for the prelude but shouldn't be visible from the
//       outside inside a module 'Foundation'. This can be done by writing the module stuff
//       by hand using anonymous functions, or by generating these anonymous functions.

// TODO: Fix '@(precedence below ;)' for all functions using 'scope' (including all forms of 'let')
(impure $(let basic        $var = $val;) => scope) (       ($var as frozen code) $val => ($`var` => scope) val)
(impure $(let basic impure $var = $val;) => scope) (impure ($var as frozen code) $val => ($`var` => scope) val)

// Normal 'frozen' keyword only freezes until 'expr' gets used again.
// Use '{expr}' to permafrost 'expr'.
let basic {($expr as frozen)} _ = closed $expr _ => expr;
// Defrost with 'defrost {expr}'.
let basic defrost ($pfexpr as {_}) = $pfexpr => pfexpr _;

// We could've just used 'frozen' here. However, using permafrost forces the user to explicitly
// write '{}', thereby making them aware of the code not being evaluated until later.
// It's convention to make this explicit as long as it doesn't negatively affect user experience.
let basic               basic func ($pattern as frozen) ($body as {_}); = $pattern $body => frozenraw (let basic        $`pattern` = ALL_ARGS_PLACEHOLDERS pattern => defrost body;);
let basic impure impure basic func ($pattern as frozen) ($body as {_}); = $pattern $body => frozenraw (let basic impure $`pattern` = ALL_ARGS_PLACEHOLDERS pattern => defrost body;);

basic func declare ($var as frozen code) {
	decl $`var` in scope
};